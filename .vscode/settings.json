{
    "eslint.debug": true,
    "workbench.colorCustomizations": {
        "tab.activeBackground": "#703f1e",

        
    },
// Controls if quick suggestions should show up while typing
"editor.quickSuggestions": {
    "other": true,
    "comments": false,
    "strings": false
},

 // Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.
"editor.acceptSuggestionOnCommitCharacter": true,

// Controls if suggestions should be accepted on 'Enter' - in addition to 'Tab'. Helps to avoid ambiguity between inserting new lines or accepting suggestions. The value 'smart' means only accept a suggestion with Enter when it makes a textual change
"editor.acceptSuggestionOnEnter": "on",

// Controls the delay in ms after which quick suggestions will show up.
"editor.quickSuggestionsDelay": 10,

// Controls if suggestions should automatically show up when typing trigger characters
"editor.suggestOnTriggerCharacters": true,

// Controls if pressing tab inserts the best suggestion and if tab cycles through other suggestions
"editor.tabCompletion": "off",

// Controls whether sorting favours words that appear close to the cursor
"editor.suggest.localityBonus": true,

// Controls how suggestions are pre-selected when showing the suggest list
"editor.suggestSelection": "recentlyUsed",

// Enable word based suggestions
"editor.wordBasedSuggestions": true,

// Enable parameter hints
"editor.parameterHints.enabled": true,
//===================

"[dart]": {
    // Automatically format code on save and during typing of certain characters
    // (like `;` and `}`).
    //"editor.formatOnSave": true,
    //"editor.formatOnType": true,

    // Draw a guide line at 80 characters, where Dart's formatting will wrap code.
    "editor.rulers": [120],

    // Disables built-in highlighting of words that match your selection. Without
    // this, all instances of the selected text will be highlighted, interfering
    // with Dart's ability to highlight only exact references to the selected variable.
    //"editor.selectionHighlight": false,

    // By default, VS Code prevents code completion from popping open when in
    // "snippet mode" (editing placeholders in inserted code). Setting this option
    // to `false` stops that and allows completion to open as normal, as if you
    // weren't in a snippet placeholder.
    //"editor.suggest.snippetsPreventQuickSuggestions": false,

    // By default, VS Code will pre-select the most recently used item from code
    // completion. This is usually not the most relevant item.
    //
    // "first" will always select top item
    // "recentlyUsedByPrefix" will filter the recently used items based on the
    //     text immediately preceding where completion was invoked.
    //"editor.suggestSelection": "first",

    // Allows pressing <TAB> to complete snippets such as `for` even when the
    // completion list is not visible.
    //"editor.tabCompletion": "onlySnippets",

    // By default, VS Code will populate code completion with words found in the
    // current file when a language service does not provide its own completions.
    // This results in code completion suggesting words when editing comments and
    // strings. This setting will prevent that.
    //"editor.wordBasedSuggestions": false,
}
}


